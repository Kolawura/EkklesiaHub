// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String                @id @default(uuid())
  username    String                @unique
  email       String                @unique
  password    String
  bio         String?
  profileImg  String?
  bannerImg   String?
  posts       Post[]
  comments    Comment[]
  reactions   Reaction[]
  memberships CommunityMembership[]
  followers   Follow[]              @relation("Followers")
  following   Follow[]              @relation("Following")
  bookmarks   Bookmark[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model Community {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  memberships CommunityMembership[]
  posts       Post[]
}

model CommunityMembership {
  id       Int      @id @default(autoincrement())
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())

  userId      String
  communityId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
}

enum Role {
  MEMBER
  ADMIN
  CURATED_WRITER
}

model Post {
  id          String     @id @default(uuid())
  title       String
  slug        String     @unique
  content     String
  coverImage  String?
  status      PostStatus @default(DRAFT)
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
  tags        Tag[]      @relation("PostTags")
  comments    Comment[]
  reactions   Reaction[]
  bookmarks   Bookmark[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[] @relation("PostTags")
}

model Comment {
  id        String     @id @default(uuid())
  content   String
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post       @relation(fields: [postId], references: [id])
  postId    String
  parent    Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  String?
  replies   Comment[]  @relation("CommentReplies")
  reactions Reaction[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Reaction {
  id        String       @id @default(uuid())
  type      ReactionType
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  post      Post?        @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment?     @relation(fields: [commentId], references: [id])
  commentId String?
  createdAt DateTime     @default(now())
}

enum ReactionType {
  LIKE
  LOVE
  CLAP
  INSIGHTFUL
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId]) // Prevent duplicate follows
}

model Bookmark {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Prevent duplicate bookmarks
}
